[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "FastAPI-JSONAPI"
dynamic = ["version"]
description = "FastAPI extension to create REST web api according to JSON:API 1.0 specification with FastAPI, Pydantic and data provider of your choice (SQLAlchemy, Tortoise ORM)"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Aleksey Nekrasov", email = "a.nekrasov@mts.ai" },
    { name = "Suren Khorenyan", email = "s.khorenyan@mts.ai" },
    { name = "German Bernadskiy", email = "german11235813@gmail.com" },
]
keywords = [
    "fastapi",
    "jsonapi",
    "json:api",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Utilities",
]
dependencies = [
    "fastapi>=0.79.0",
    "pydantic>=1.9.1",
    "simplejson>=3.17.6",
    "uvicorn>=0.18.2",
]

[project.optional-dependencies]
all = [
    "pytest",
    "sphinx",
    "SQLAlchemy[asyncio]>=1.4.39",
    "tortoise-orm>=0.19.2",
]
docs = [
    "sphinx",
]
sqlalchemy = [
    "SQLAlchemy[asyncio]>=1.4.39",
]
tests = [
    "pytest",
]
tortoise-orm = [
    "tortoise-orm>=0.19.2",
]

[project.urls]
Documentation = "https://fastapi-jsonapi.readthedocs.io/"
Source = "https://github.com/mts-ai/FastAPI-JSONAPI"

[tool.hatch.version]
path = "fastapi_jsonapi/VERSION"
pattern = "(?P<version>[^']+)"

[tool.hatch.build.targets.sdist]
include = [
    "/fastapi_jsonapi",
    "/examples",
]

[tool.hatch.build.targets.wheel]
packages = [
    "fastapi_jsonapi"
]

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
python = "^3.9"
fastapi = ">=0.79.0"
pydantic = ">=1.9.1"
simplejson = ">=3.17.6"
uvicorn = ">=0.18.2"

sqlalchemy = { version = ">=1.4.39", optional = true, extras = ["asyncio"] }
tortoise-orm = { version = ">=0.19.2", optional = true }

[tool.poetry.group.tests.dependencies]
pytest = "^7.3.1"
faker = "^18.9.0"
httpx = "^0.24.1"
pytest-asyncio = "^0.21.0"
coverage = "^7.2.6"
pytest-cov = "^4.1.0"
aiosqlite = "0.17.0"
asyncpg = "0.28.0"


[tool.poetry.group.lint.dependencies]
black = "^24.4.2"
ruff = "^0.4.8"
mypy = "^1.10.0"
pre-commit = "^3.7.1"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0.1"


[tool.poetry.group.dev.dependencies]
hatch = "^1.7.0"

[tool.poetry.extras]
sqla = ["sqlalchemy"]
tortoise = ["tortoise-orm"]
databases = ["sqlalchemy", "tortoise-orm"]

[tool.black]
line-length = 119
target-version = ["py38"]

[tool.ruff]
line-length = 119
target-version = "py39"
output-format = "full"


# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs/*",
    "examples/api_for_tortoise_orm/*",
]


[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # mccabe
    "C90",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    # "ANN",  # temporarily disabled
    # flake8-async
    "ASYNC",
    # flake8-trio
    "TRIO",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-copyright
    # missing-copyright-notice (CPY001)#
    # "CPY",
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-debugger
    "T10",
    # flake8-django
    "DJ",
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging
    "LOG",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-slots
    "SLOT",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-gettext
    "INT",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # flake8-todos
    "TD",
    # flake8-fixme
    "FIX",
    # eradicate
    "ERA",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Pylint
    "PL",
    # pylint more
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Airflow
    "AIR",
    # Perflint
    "PERF",
    # refurb
    "FURB",
    # Ruff-specific rules
    "RUF",
]

extend-ignore = [
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood
    #    "D403",
    "D404", #  First word of the docstring should not be "This"
    "D415", # First line should end with a period, question mark, or exclamation point
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`
    "D200",  # One-line docstring should fit on one line
    "D203", # 1 blank line required before class docstring
    "D205", # 1 blank line required between summary line and description",
    "D210", # No whitespaces allowed surrounding docstring text
    "D212", # Multi-line docstring summary should start at the first line
    #    "D301",  # Use r""" if any backslashes in a docstring
    "PLR0913", # Too many arguments to function call
    #    "A003",  # Class attribute `type` is shadowing a Python builtin
    "ARG001", # Unused function argument: `{name}`
    "ARG002", # Unused method argument: `{name}`
    "ARG003", # Unused class method argument: `{name}`
    "RUF001", # String contains ambiguous unicode character {confusable} (did you mean {representant}?)
    "RUF002", # Docstring contains ambiguous unicode character {confusable} (did you mean {representant}?)
    "RUF003", # Comment contains ambiguous unicode character {confusable} (did you mean {representant}?)
    "PT006", # pytest parametrize tuple args
    "B008", # Do not perform function call `Depends` in argument defaults
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "FIX002", # Line contains TODO, consider resolving the issue
    "FIX003", # Line contains XXX, consider resolving the issue
    "FIX004", # Line contains HACK, consider resolving the issue
    "TD001", # Invalid TODO tag: `XXX`
    "TD002", # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>
    "TD003", # Missing issue link on the line following this TODO
    "TD005", # Missing issue description after `TODO`
    "ERA001", # TODO: remove
    "S101", # TODO: remove
]


[tool.ruff.lint.per-file-ignores]
"examples/api_for_sqlalchemy/*" = [
    "E402",
    "D105",
]
"tests/*" = [
    "S101",
    "ANN001",
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PLR0913", # Too many arguments in function definition
    "FBT001", # FBT001 Boolean-typed positional argument in function definition
    "C901", # func is too complex (11 > 10)
    "N806", #Variable `{name}` in function should be lowercase
]
"tests/**/conftest.py" = [
    "PGH004", # Use specific rule codes when using `noqa`
]
"tests/test_utils/test_dependency_helper.py" = [
    "SLF001",
]

"fastapi_jsonapi/data_layers/**.py" = [
    "FBT001",
]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
